<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Kev&#39;s Site</title>
    <link>https://www.kevssite.com/tags/javascript/</link>
    <description>Recent content in Javascript on Kev&#39;s Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.kevssite.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Godot Experiment no. 1, Retrocadia</title>
      <link>https://www.kevssite.com/retrocadia/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/retrocadia/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.kevssite.com/images/retrocadia/retrocadia-title.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Most of my recent (and not so recent) programming efforts have been in JavaScript that runs in the browser. I believed that with WebGL, the browser would become more relevant in gaming and graphics applications. Fast forward a few years and it&amp;rsquo;s clear that the vast majority of PC games are still downloaded and installed, just as they were decades ago.&lt;/p&gt;&#xA;&lt;p&gt;I decided to return to creating native games for the PC. It&amp;rsquo;s been almost 20 years since I last wrote a native PC game, so I thought I&amp;rsquo;d start with something simple to get my eye in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Seamless audio looping in html5 JavaScript</title>
      <link>https://www.kevssite.com/seamless-audio-looping/</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/seamless-audio-looping/</guid>
      <description>&lt;p&gt;For my latest javascript/threejs experiment I created a retro 1980&amp;rsquo;s inspired demo, which renders hundreds of sprites in a pseudo 3D style that was common in the Atari ST and Amiga demos of the late 80&amp;rsquo;s.&lt;/p&gt;&#xA;&lt;p&gt;Of course, no retro demo would be complete without a retro soundtrack. For my &lt;a href=&#34;https://www.kevssite.com/retro-particle-demo&#34;&gt;Retro Particle Demo&lt;/a&gt; this would be a short track that loops continuously.&lt;/p&gt;&#xA;&lt;p&gt;My initial attempt used the html5 audio tag:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;audio&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demomusic&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio/music.mp3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio/mpeg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A look at Pixi.js</title>
      <link>https://www.kevssite.com/a-look-at-pixi-js/</link>
      <pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/a-look-at-pixi-js/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been experimenting with the html canvas element recently by writing some simple 2D games. One challenge is making a canvas based game fit nicely on the screen given the vast variety in browser resolutions. 2D games tend to be made up of images and I found that scaling these images so that they fill the browser window was both slow and ugly.&lt;/p&gt;&#xA;&lt;p&gt;This got me thinking about WebGL. Is it possible to use a 3D WebGL library to render a 2D game and gain the scaling and performance advantages of the GPU? At first I looked at three.js, which is probably the most popular WebGL library. But in doing my research I discovered a dedicated 2D JavaScript WebGL library called &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;Pixi.js&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript KeyCodes</title>
      <link>https://www.kevssite.com/javascript-keycodes/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/javascript-keycodes/</guid>
      <description>&lt;p&gt;This is a simple JavaScript keycode lookup page. Just press a key and the JavaScript Key Code will be displayed in the box below.&lt;/p&gt;&#xA;&lt;p&gt;If you want to stop your browser scrolling when you press space or arrows etc then click in the input field to take the focus away from the whole page.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;input type=&#34;text&#34; maxlength=&#34;0&#34; size=&#34;2&#34;&gt;&#xA;&#xA;&lt;script&gt;&#xA;  window.addEventListener(&#34;keydown&#34;, function (event) {&#xA;    document.getElementById(&#34;code&#34;).innerHTML = event.keyCode;&#xA;    if (event.key) {&#xA;      if (event.keyCode &gt; 47 &amp;&amp; event.keyCode &lt; 91) {&#xA;        document.getElementById(&#34;char&#34;).innerHTML = &#34; - &#34; + event.key&#xA;      } else {&#xA;        document.getElementById(&#34;char&#34;).innerHTML = &#34; - &#34; + event.key;&#xA;      }&#xA;    }&#xA;  }, false);&#xA;&lt;/script&gt;&#xA;&lt;span id=&#34;code&#34; style=&#34;background-color: #faee95; font-size: 100;  border-style: solid; border-width: 5px; border-color: #848789&#34;&gt;&lt;/span&gt;&#xA;&lt;span id=&#34;char&#34; style=&#34;font-size: 70;&#34;&gt;&lt;/span&gt;&#xA;&#xA;&lt;p&gt;The text equivalent of the key being pressed is only displayed in browsers that support event.key. Rather surprisingly this does not include Chrome!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emulators written in JavaScript</title>
      <link>https://www.kevssite.com/emulators-written-in-javascript/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/emulators-written-in-javascript/</guid>
      <description>&lt;p&gt;A list of machine emulators completely written in JavaScript that I find to be both impressive and interesting. Writing an emulator in any language is difficult and requires some serious programming chops. But to do it in JavaScript must surely require a level of programming genius (or maybe madness - I hear it&amp;rsquo;s a fine line!) that us mere mortals can only dream of aspiring to.&lt;/p&gt;&#xA;&lt;p&gt;These are my favourites that I’ve stumbled across, catalogued here so I can easily find them again whenever I feel the need for a retro computing fix&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>More adventures in JavaScript</title>
      <link>https://www.kevssite.com/more-adventures-in-javascript/</link>
      <pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/more-adventures-in-javascript/</guid>
      <description>&lt;p&gt;Having not written much client side JavaScript for at least a couple of years I thought I&amp;rsquo;d re-introduce myself to the language, and to the html5 canvas element.&lt;/p&gt;&#xA;&lt;p&gt;I decided to spend a few hours building a html5 version of the old ZX Spectrum Classic, Lightcycles (1983), which itself was based on Tron. This isn&amp;rsquo;t exactly a faithful reproduction, it&amp;rsquo;s more inspired by my memory of the game than it is a conversion of it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adventures in JavaScript Canvas</title>
      <link>https://www.kevssite.com/adventures-in-javascript-canvas/</link>
      <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/adventures-in-javascript-canvas/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been reading a lot about HTML5 recently and it looks like the browser could soon become the dominant application platform. So, I thought I&amp;rsquo;d have a look at the new canvas element and delve into some JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;To get me started I&amp;rsquo;ve decided to write a (very) simple version of an old classic zx Spectrum  game: Jumping Jack.&lt;/p&gt;&#xA;&lt;p&gt;At the time of writing this only works in browsers that support the new canvas html element. So yay for Firefox and boo to Internet Explorer.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
