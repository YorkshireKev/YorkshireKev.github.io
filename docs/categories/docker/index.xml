<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Kev&#39;s Site</title>
    <link>https://www.kevssite.com/categories/docker/</link>
    <description>Recent content in Docker on Kev&#39;s Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Feb 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.kevssite.com/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using cheap arduino clones with macOS Sierra</title>
      <link>https://www.kevssite.com/macos-sierra-driver-for-arduino-clones-ch340g/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/macos-sierra-driver-for-arduino-clones-ch340g/</guid>
      <description>&lt;h3 id=&#34;update---feb-2020&#34;&gt;Update - Feb 2020&lt;/h3&gt;&#xA;&lt;p&gt;These instructions are no longer required for macOS Mojave 10.14 or later. Updating to the latest macOS version should be enough to make Nanos based on CH340G chipset work. &lt;em&gt;&lt;strong&gt;In fact, installing these drivers on macOS Mojave 10.14 or later could cause OS issues!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;original-post&#34;&gt;Original Post&lt;/h3&gt;&#xA;&lt;p&gt;I recently bought some really cheap Arduino Nanos. These were based on the CH340G chipset. Unfortunately, when I loaded the Arduino editor and tried to push code onto one of them, I discovered that there was no USB serial driver available to select.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Useful Docker Commands</title>
      <link>https://www.kevssite.com/useful-docker-commands/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/useful-docker-commands/</guid>
      <description>&lt;p&gt;These are a bunch of docker commands that I find useful for keeping things tidy.&lt;/p&gt;&#xA;&lt;p&gt;Remove all orphaned images. &lt;em&gt;These are the images tagged as &amp;lt;none&amp;gt;.&lt;/em&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images -q --filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dangling=true&amp;#34;&lt;/span&gt; | xargs docker rmi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&#xA;&lt;p&gt;Delete/remove all stopped containers. Note that -v option; it will also delete any persistent volumes that belong to the stopped containers.&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps -aq --filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status=exited&amp;#34;&lt;/span&gt; | xargs docker rm -v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker ps -aq --filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status=created&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Console access into a running Docker container</title>
      <link>https://www.kevssite.com/console-access-into-a-running-docker-container/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/console-access-into-a-running-docker-container/</guid>
      <description>&lt;p&gt;Sometimes, when setting up and debugging a container it is extremely useful to be able to &amp;lsquo;shell into&amp;rsquo; the container to get a closer look at what&amp;rsquo;s going on.&lt;/p&gt;&#xA;&lt;p&gt;This is a quick guide on how to get shell console access into a running Docker container.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;UPDATE. If you are running docker version 1.3 or greater then you should use docker exec instead (see docker man pages for more info). The only use case that still requires the use of nsenter is where the user assigned to the container prevents you from doing tasks inside. e.g. where root access is needed but the container is not running as root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install nsenter from source</title>
      <link>https://www.kevssite.com/install-nsenter-from-source/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://www.kevssite.com/install-nsenter-from-source/</guid>
      <description>&lt;p&gt;nsenter is a great command line tool for accessing docker containers. Unfortunately  it isn’t available in Ubuntu 14.04 at the time of writing. Fortunately building it from source is quite simple.&lt;/p&gt;&#xA;&lt;p&gt;Get the latest version of util-linux from kernel.org&#xA;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://www.kernel.org/pub/linux/utils/util-linux/&#34;&gt;https://www.kernel.org/pub/linux/utils/util-linux/&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;At the time of writing the latest version was v2.25, which is the version used in the examples here.&lt;/p&gt;&#xA;&lt;p&gt;Install the build dependencies&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install build-essential libncurses5-dev libslang2-dev gettext zlib1g-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;libselinux1-dev debhelper lsb-release pkg-config po-debconf autoconf &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;automake autopoint libtool python2.7-dev&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
